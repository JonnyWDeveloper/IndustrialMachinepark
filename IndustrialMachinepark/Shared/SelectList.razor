@typeparam TItem

<div class="container">
    <ul id="forecastsList" class="list-group align-self-sm-stretch mt-4">
        @foreach (var item in Items)
        {
            var id = Guid.NewGuid();
           
            <li id="@id" class="@SetCss(item) list-group-item">
                

                @*@if (SelectedItems.Contains(item))
                {
                    <input id="@id" type="checkbox" checked="checked" @onchange="_ => HandleChange(item)" />
                }
                else
                {
                    <input id="@id" type="checkbox" @onchange="_ => HandleChange(item)" />
                }
                @if (ItemTemplate is not null)
                {
                    @ItemTemplate(item)
                }*@


                <input checked  type="checkbox" @onchange=" () => HandleChange(item)" />
                @ItemTemplate(item)
                <button class="btn btn-danger float-right" >
                    x
                </button>
            </li>

           
        }
    </ul>
</div>

@code {
    


    [Parameter]
    public IEnumerable<TItem>? Items
    {
        get;
        set;
    }

    [Parameter] 

    public RenderFragment<TItem>? ItemTemplate
    {
        get;
        set;
    }

    [Parameter]                        //Blazor convention @bind-{PROPERTY} "Chained bind"
    public List<TItem>? SelectedItems //Has to have the same name minus Changed (event name)
    {                                 //as the EventCallback property
        get;
        set;
    }

    [Parameter]                        //Must have the name SelectedItems + (Change = event name)
    public EventCallback<List<TItem>> SelectedItemsChanged
    {
        get;
        set;
    }

    void HandleChange( TItem item)
    {
      
        SetSelect(item);
     
        SelectedItemsChanged.InvokeAsync(SelectedItems);

        StateHasChanged();
    }

    bool IsSelected(TItem item)
    {
        if (SelectedItems.Contains(item))
        { 

            return true; 
        }
        return false;
    }

    string SetCss(TItem item)
        => IsSelected(item) ? "online" : "offline";

    void SetSelect(TItem item) 
    {
        if (IsSelected(item)) 
            SelectedItems.Remove(item);
        else
            SelectedItems.Add(item);
    }
}
